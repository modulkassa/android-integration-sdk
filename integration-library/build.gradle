plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'kotlin-android-extensions'
    id 'maven-publish'
    id 'org.jetbrains.dokka' version '1.6.10'
    id 'signing'
}

def libVersionName = "1.6.0"
def libArtifactId = "integration-library"
version = libVersionName
group = 'ru.modulkassa.pos'

android {
    compileSdkVersion versions.compileSdk

    defaultConfig {
        minSdkVersion versions.minSdk
        targetSdkVersion versions.targetSdk
        versionName libVersionName
        buildConfigField 'String', 'VERSION_NAME', "\"${libVersionName}\""
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    // For Kotlin projects
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    lintOptions {
        abortOnError false
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation libraries.kotlin
    implementation libraries.gson
    implementation libraries.timber

    testImplementation libraries.junit
    testImplementation libraries.robolectric
    testImplementation libraries.mockito
    testImplementation(libraries.mockitoKotlin) {
        exclude(group: 'org.jetbrains.kotlin')
    }
    testImplementation libraries.kotlinJUnit
    testImplementation libraries.truth
}

Properties properties = new Properties()
File propertiesFile = project.rootProject.file('local.properties')
if (propertiesFile.exists()) {
    properties.load(propertiesFile.newDataInputStream())
}
def sonatypePassword = System.getenv("SONATYPE_PASSWORD") ?: properties.getProperty("sonatype.password")
def sonatypeUsername = System.getenv("SONATYPE_USERNAME") ?: properties.getProperty("sonatype.username")
def signingKeyId = System.getenv("SIGNING_KEY_ID") ?: properties.getProperty("signing.keyId")
def signingKey = System.getenv("SIGNING_KEY") ?: properties.getProperty("signing.key")
def signingPassword = System.getenv("SIGNING_PASSWORD") ?: properties.getProperty("signing.password")

dokkaJavadoc.configure {
    suppressObviousFunctions.set(false) // Suppress obvious functions like default toString or equals
}

task packageJavadoc(type: Jar, dependsOn: 'dokkaJavadoc') {
    from dokkaJavadoc.outputDirectory
    archiveClassifier = 'javadoc'
}

task sourceJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier "sources"
}

artifacts {
    archives sourceJar, packageJavadoc
}

publishing {
    repositories {
        maven {
            name 'Internal'
            url properties.getProperty("nexus.url")
            credentials {
                username properties.getProperty("nexus.username")
                password properties.getProperty("nexus.password")
            }
        }
        maven {
            name 'Central'
            url "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username sonatypeUsername
                password sonatypePassword
            }
        }
    }

    publications {
        release(MavenPublication) {
            groupId group
            artifactId libArtifactId
            version libVersionName
            artifact("$buildDir/outputs/aar/integration-library-release.aar")
            artifact packageJavadoc
            artifact sourceJar

            pom {
                name = libArtifactId
                description = 'Modulkassa official Android SDK'
                url = "https://github.com/modulkassa/android-integration-sdk"
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://github.com/modulkassa/android-integration-sdk/blob/master/LICENSE'
                    }
                }
                developers {
                    developer {
                        id = 'antashev'
                        name = 'Antashev Ilya'
                        email = 'i.antashev@modulbank.ru'
                    }
                    developer {
                        id = 'AnastasiaKoreshkova'
                        name = 'Anastasia Koreshkova'
                        email = 'a.koreshkova@modulbank.ru'
                    }
                    developer {
                        id = 'Ansar8'
                        name = 'Ansar Kadyrov'
                        email = 'a.kadyrov@modulbank.ru'
                    }
                }
                scm {
                    connection = 'scm:git:github.com/modulkassa/android-integration-sdk.git'
                    developerConnection = 'scm:git:ssh://github.com/modulkassa/android-integration-sdk.git'
                    url = 'https://github.com/modulkassa/android-integration-sdk/tree/master'
                }
            }

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                configurations.api.allDependencies.each {
                    if (it.name != 'unspecified') {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
                configurations.implementation.allDependencies.each {
                    if (it.name != 'unspecified') {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
}

signing {
    required { gradle.taskGraph.hasTask("publishReleasePublicationToCentralRepository") }
    useInMemoryPgpKeys(
        signingKeyId,
        signingKey,
        signingPassword,
    )
    sign publishing.publications
}

